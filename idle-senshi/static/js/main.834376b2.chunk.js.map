{"version":3,"sources":["components/BossCard.js","components/MonsterCard.js","components/TeamMemberCard.js","components/GameLogCard.js","data/TeamMemberNames.js","data/MonsterNames.js","App.js","serviceWorker.js","index.js"],"names":["BossCard","props","info","className","Name","value","Energy","max","EnergyGoal","MonsterCard","div","animate","animated","scale","transition","duration","HP","MaxHP","TeamMemberCard","Fallen","Level","Class","XP","onClick","active","setTeamMemberAction","index","Action","GameLogCard","messages","length","Modifiers","Prefix","Suffix","NamePools","AdjectivePools","NounPools","App","getRandomItem","array","Math","floor","random","useState","TeamMemberNames","teamNameModifier","setTeamNameModifier","teamNamePool","MonsterNames","monsterAdjectivePool","setMonsterAdjectivePool","monsterNounPool","setMonsterNounPool","teamMemberIndex","teamMemberAnimated","monsterAnimated","animationFlags","setAnimationFlags","generateTeamMember","classIndex","name","pop","MP","MaxMP","generateBoss","sort","generateMonster","difficultyModifier","baseDifficulty","team","reduce","totalLevel","member","difficulty","Damage","EnergyGain","Difficulty","episodeStarted","setEpisodeStarted","episodeVillainActed","setEpisodeVillainActed","episodeVillainDefeated","setEpisodeVillainDefeated","newTeamMemberAdded","setNewTeamMemberAdded","Score","BossInfo","MonsterInfo","gameState","setGameState","setTeam","Array","map","logMessages","setLogMessages","flags","setFlags","initialize","initialized","log","text","console","useEffect","interval","setInterval","gameIsOver","endGame","defeatEpisodeVillain","anyTeamMemberHasJustFallen","i","defeatTeamMember","setNewArcVillain","setNewEpisodeVillain","teamMemberCanAct","HasActed","teamMemberAct","teamMemberCanLevelUp","teamMemberLevelUp","addTeamMember","endEpisode","clearInterval","previousMemberHasNotFallen","previousMemberHasNotActed","previousMemberHasNotLevelledUp","startEpisode","slice","min","action","disabled","href","target","src","alt","style","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.834376b2.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bulma/css/bulma.css\";\r\n\r\nfunction BossCard(props) {\r\n    if (props.info === null) {\r\n        return <div></div>;\r\n    }\r\n    return (\r\n        <div className=\"card\">\r\n            <header className=\"card-header\">\r\n                <p className=\"card-header-title\">{props.info.Name}</p>\r\n            </header>\r\n            <div className=\"card-content\">\r\n                <div className=\"content\">\r\n                    Energy:\r\n                    <br/>\r\n                    <progress className=\"progress\" value={props.info.Energy} max={props.info.EnergyGoal}></progress>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BossCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bulma/css/bulma.css\";\r\n\r\nfunction MonsterCard(props) {\r\n    if (props.info === null) {\r\n        return <div></div>;\r\n    }\r\n    return (\r\n        <motion.div\r\n            className=\"card\"\r\n            animate={props.animated ? { scale: 1.05 } : { scale: 1 }}\r\n            transition={{ duration: 0.25 }}\r\n        >\r\n            <header className=\"card-header\">\r\n                <p className=\"card-header-title\">{props.info.Name}</p>\r\n            </header>\r\n            <div className=\"card-content\">\r\n                <div className=\"content\">\r\n                    HP:\r\n                    <progress\r\n                        className=\"progress\"\r\n                        value={props.info.HP}\r\n                        max={props.info.MaxHP}\r\n                    ></progress>\r\n                </div>\r\n            </div>\r\n        </motion.div>\r\n    );\r\n}\r\n\r\nexport default MonsterCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bulma/css/bulma.css\";\r\n\r\nfunction TeamMemberCard(props) {\r\n    if (props.info === null) {\r\n        return <div></div>;\r\n    }\r\n    if (props.info.Fallen) {\r\n        return (\r\n            <div className=\"card\">\r\n                <header className=\"card-header\">\r\n                    <p className=\"card-header-title\">{props.info.Name}</p>\r\n                </header>\r\n                <div className=\"card-content\">\r\n                    <div className=\"content\">X</div>\r\n                </div>\r\n                <footer className=\"card-footer\">\r\n                    <a className={\"card-footer-item\"}>Fight</a>\r\n                    <a className={\"card-footer-item\"}>Rest</a>\r\n                    <a className={\"card-footer-item\"}>Train</a>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <motion.div\r\n            className=\"card\"\r\n            animate={props.animated ? { scale: 1.05 } : { scale: 1 }}\r\n            transition={{ duration: 0.25 }}\r\n        >\r\n            <header className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    {props.info.Name} (lv. {props.info.Level} {props.info.Class}\r\n                    )\r\n                </p>\r\n            </header>\r\n            <div className=\"card-content\">\r\n                <div className=\"content\">\r\n                    HP:\r\n                    <progress\r\n                        className=\"progress\"\r\n                        value={props.info.HP}\r\n                        max={props.info.MaxHP}\r\n                    ></progress>\r\n                    XP:\r\n                    <progress\r\n                        className=\"progress\"\r\n                        value={props.info.XP}\r\n                        max={10}\r\n                    ></progress>\r\n                </div>\r\n            </div>\r\n            <footer className=\"card-footer\">\r\n                <a\r\n                    onClick={\r\n                        props.active\r\n                            ? () =>\r\n                                  props.setTeamMemberAction(\r\n                                      \"Fight\",\r\n                                      props.index\r\n                                  )\r\n                            : null\r\n                    }\r\n                    className={\r\n                        \"card-footer-item\" +\r\n                        (props.info.Action === \"Fight\"\r\n                            ? props.active\r\n                                ? \" has-background-info has-text-white\"\r\n                                : \"  has-background-grey has-text-white\"\r\n                            : \"\")\r\n                    }\r\n                >\r\n                    Fight\r\n                </a>\r\n                <a\r\n                    onClick={\r\n                        props.active\r\n                            ? () =>\r\n                                  props.setTeamMemberAction(\"Rest\", props.index)\r\n                            : null\r\n                    }\r\n                    className={\r\n                        \"card-footer-item\" +\r\n                        (props.info.Action === \"Rest\"\r\n                            ? props.active\r\n                                ? \" has-background-info has-text-white\"\r\n                                : \"  has-background-grey has-text-white\"\r\n                            : \"\")\r\n                    }\r\n                >\r\n                    Rest\r\n                </a>\r\n                <a\r\n                    onClick={\r\n                        props.active\r\n                            ? () =>\r\n                                  props.setTeamMemberAction(\r\n                                      \"Train\",\r\n                                      props.index\r\n                                  )\r\n                            : null\r\n                    }\r\n                    className={\r\n                        \"card-footer-item\" +\r\n                        (props.info.Action === \"Train\"\r\n                            ? props.active\r\n                                ? \" has-background-info has-text-white\"\r\n                                : \"  has-background-grey has-text-white\"\r\n                            : \"\")\r\n                    }\r\n                >\r\n                    Train\r\n                </a>\r\n            </footer>\r\n        </motion.div>\r\n    );\r\n}\r\n\r\nexport default TeamMemberCard;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction GameLogCard(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-content\">\r\n                <p className=\"has-text-grey-lighter\">{props.messages[props.messages.length-8]}</p>\r\n                <p className=\"has-text-grey-light\">{props.messages[props.messages.length-7]}</p>\r\n                <p className=\"has-text-grey\">{props.messages[props.messages.length-6]}</p>\r\n                <p className=\"has-text-grey-dark\">{props.messages[props.messages.length-5]}</p>\r\n                <p className=\"has-text-grey-darker\">{props.messages[props.messages.length-4]}</p>\r\n                <p>{props.messages[props.messages.length-3]}</p>\r\n                <p>{props.messages[props.messages.length-2]}</p>\r\n                <p>{props.messages[props.messages.length-1]}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameLogCard;\r\n","export default {\r\n    Modifiers: [\r\n        {\r\n            Prefix: \"Sailor \",\r\n            Suffix: \"\"\r\n        },\r\n        {\r\n            Prefix: \"Cure \",\r\n            Suffix: \"\"\r\n        },\r\n        {\r\n            Prefix: \"Magical \",\r\n            Suffix: \"\"\r\n        },\r\n        {\r\n            Prefix: \"\",\r\n            Suffix: \" Ranger\"\r\n        },\r\n        {\r\n            Prefix: \"\",\r\n            Suffix: \" Senshi\"\r\n        },\r\n        {\r\n            Prefix: \"Fighting \",\r\n            Suffix: \"\"\r\n        }\r\n    ],\r\n    NamePools: [\r\n        [\r\n            \"Mercury\",\r\n            \"Mars\",\r\n            \"Earth\",\r\n            \"Moon\",\r\n            \"Venus\",\r\n            \"Jupiter\",\r\n            \"Saturn\",\r\n            \"Uranus\",\r\n            \"Neptune\",\r\n            \"Pluto\"\r\n        ],\r\n        [\"Red\", \"Orange\", \"Yellow\", \"Green\", \"Blue\", \"Indigo\", \"Violet\"],\r\n    ]\r\n};\r\n","export default {\r\n    AdjectivePools: [\r\n        [\"Red\", \"Orange\", \"Yellow\", \"Green\", \"Blue\", \"Indigo\", \"Violet\"],\r\n        [\r\n            \"Thunder\",\r\n            \"Burning\",\r\n            \"Electric\",\r\n            \"Magnetic\",\r\n            \"Smoking\",\r\n            \"Quick\",\r\n            \"Heavy\",\r\n            \"Shining\",\r\n            \"Silver\",\r\n            \"Golden\"\r\n        ]\r\n    ],\r\n    NounPools: [\r\n        [\r\n            \"Rat\",\r\n            \"Ox\",\r\n            \"Tiger\",\r\n            \"Rabbit\",\r\n            \"Dragon\",\r\n            \"Snake\",\r\n            \"Horse\",\r\n            \"Goat\",\r\n            \"Monkey\",\r\n            \"Rooster\",\r\n            \"Dog\",\r\n            \"Pig\",\r\n            \"Bat\",\r\n            \"Lion\",\r\n            \"Eel\"\r\n        ]\r\n    ]\r\n};\r\n","import React, { useEffect, useState } from \"react\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bulma/css/bulma.css\";\nimport BossCard from \"./components/BossCard\";\nimport MonsterCard from \"./components/MonsterCard\";\nimport TeamMemberCard from \"./components/TeamMemberCard\";\nimport GameLogCard from \"./components/GameLogCard\";\n\nimport TeamMemberNames from \"./data/TeamMemberNames\";\nimport MonsterNames from \"./data/MonsterNames\";\n\nfunction App() {\n    const getRandomItem = array => {\n        return array[Math.floor(Math.random() * array.length)];\n    };\n\n    const [teamNameModifier, setTeamNameModifier] = useState(() => {\n        return getRandomItem(TeamMemberNames.Modifiers);\n    });\n    const [teamNamePool, setTeamNamePool] = useState(\n        getRandomItem(TeamMemberNames.NamePools)\n    );\n    const [monsterAdjectivePool, setMonsterAdjectivePool] = useState(\n        MonsterNames.AdjectivePools[0]\n    );\n    const [monsterNounPool, setMonsterNounPool] = useState(\n        MonsterNames.NounPools[0]\n    );\n\n    const [animationFlags, setAnimationFlags] = useState({\n        teamMemberIndex: null,\n        teamMemberAnimated: false,\n        monsterAnimated: false\n    });\n\n    const generateTeamMember = () => {\n        var actions = [\"Fight\", \"Rest\", \"Train\"];\n        var classes = [\"Warrior\", \"Mage\"];\n        var classIndex = Math.floor(Math.random() * 2);\n        var name = teamNamePool.pop();\n        return {\n            Name: teamNameModifier.Prefix + name + teamNameModifier.Suffix,\n            Class: \"A\",\n            HP: 10,\n            MaxHP: 10,\n            MP: 5,\n            MaxMP: 5,\n            XP: 0,\n            Level: 1,\n            Action: actions[1],\n            Class: classes[classIndex],\n            HasActed: false,\n            Fallen: false\n        };\n    };\n\n    const generateBoss = () => {\n        setMonsterAdjectivePool(\n            getRandomItem(MonsterNames.AdjectivePools).sort(\n                () => Math.random() - 0.5\n            )\n        );\n        setMonsterNounPool(\n            getRandomItem(MonsterNames.NounPools).sort(\n                () => Math.random() - 0.5\n            )\n        );\n        return {\n            Name: \"Queen Monsteria\",\n            Energy: 0,\n            EnergyGoal: 30\n        };\n    };\n\n    const generateMonster = () => {\n        var difficultyModifier = Math.floor(Math.random() * 3);\n        var baseDifficulty = team.reduce((totalLevel, member) => {\n            return member.Level + totalLevel;\n        }, 0);\n        var difficulty = Math.max(baseDifficulty + difficultyModifier, 5);\n        return {\n            Name: monsterAdjectivePool.pop() + \" \" + monsterNounPool.pop(),\n            HP: difficulty * 2,\n            MaxHP: difficulty * 2,\n            Damage: difficulty,\n            EnergyGain: difficulty,\n            Difficulty: difficulty\n        };\n    };\n\n    const teamSize = 1;\n    //state\n    const [episodeStarted, setEpisodeStarted] = useState(false);\n    const [episodeVillainActed, setEpisodeVillainActed] = useState(false);\n    const [episodeVillainDefeated, setEpisodeVillainDefeated] = useState(false);\n    const [newTeamMemberAdded, setNewTeamMemberAdded] = useState(true);\n\n    const [gameState, setGameState] = useState(() => {\n        return {\n            Score: 0,\n            BossInfo: generateBoss(),\n            MonsterInfo: null\n        };\n    });\n    const [team, setTeam] = useState(() => {\n        return [generateTeamMember()];\n    });\n    const [logMessages, setLogMessages] = useState(\n        Array(8).map(() => {\n            return \"\";\n        })\n    );\n\n    const [flags, setFlags] = useState({});\n\n    const initialize = () => {\n        setFlags({ ...flags, initialized: true });\n        setLogMessages(\n            Array(8).map(() => {\n                return \"\";\n            })\n        );\n        setTeam(() => {\n            return [generateTeamMember()];\n        });\n        setGameState(() => {\n            return {\n                Score: 0,\n                BossInfo: generateBoss(),\n                MonsterInfo: null\n            };\n        });\n        setTeamNameModifier(() => {\n            return getRandomItem(TeamMemberNames.Modifiers);\n        });\n    };\n\n    const restart = () => {\n        initialize();\n    };\n\n    const log = text => {\n        console.log(text);\n        setLogMessages([...logMessages, text]);\n    };\n\n    //Main Loop\n    useEffect(() => {\n        if (flags.initialized === null || flags.initialized === false) {\n            initialize();\n        }\n        const interval = setInterval(() => {\n            setAnimationFlags({\n                teamMemberIndex: null,\n                teamMemberAnimated: false,\n                monsterAnimated: false\n            });\n            //console.log(\"Ding every 1 second!\");\n            if (episodeStarted) {\n                if (gameIsOver()) {\n                    endGame();\n                } else if (\n                    gameState.MonsterInfo !== null &&\n                    gameState.MonsterInfo.HP <= 0\n                ) {\n                    defeatEpisodeVillain();\n                } else if (anyTeamMemberHasJustFallen()) {\n                    var i = 0;\n                    while (team[i].HP > 0 || team[i].Fallen) {\n                        i++;\n                    }\n                    defeatTeamMember(i);\n                } else if (gameState.BossInfo === null) {\n                    setNewArcVillain();\n                } else if (\n                    gameState.MonsterInfo === null &&\n                    episodeVillainDefeated === false\n                ) {\n                    setNewEpisodeVillain();\n                } else if (teamMemberCanAct()) {\n                    var i = 0;\n                    while (team[i].HasActed) {\n                        i++;\n                    }\n                    teamMemberAct(i);\n                } else if (teamMemberCanLevelUp()) {\n                    var i = 0;\n                    while (team[i].XP < 10) {\n                        i++;\n                    }\n                    teamMemberLevelUp(i);\n                } else if (\n                    gameState.MonsterInfo !== null &&\n                    !episodeVillainActed\n                ) {\n                    setAnimationFlags({\n                        teamMemberIndex: null,\n                        teamMemberAnimated: false,\n                        monsterAnimated: true\n                    });\n                    log(gameState.MonsterInfo.Name + \" gathers Energy!\");\n                    setGameState({\n                        ...gameState,\n                        BossInfo: {\n                            ...gameState.BossInfo,\n                            Energy:\n                                gameState.BossInfo.Energy +\n                                gameState.MonsterInfo.EnergyGain\n                        }\n                    });\n                    setEpisodeVillainActed(true);\n                } else if (\n                    gameState.BossInfo.Energy >= gameState.BossInfo.EnergyGoal\n                ) {\n                    endGame();\n                } else if (team.length < teamSize && !newTeamMemberAdded) {\n                    addTeamMember();\n                } else {\n                    endEpisode();\n                }\n            }\n        }, 500);\n        return () => clearInterval(interval);\n    });\n\n    const gameIsOver = () => {\n        return (\n            team.reduce((previousMemberHasNotFallen, member) => {\n                return member.Fallen === false || previousMemberHasNotFallen;\n            }, false) === false ||\n            gameState.BossInfo.Energy >= gameState.BossInfo.EnergyGoal\n        );\n    };\n\n    const teamMemberCanAct = () => {\n        return team.reduce((previousMemberHasNotActed, member) => {\n            return (\n                (member.HasActed === false && member.Fallen === false) ||\n                previousMemberHasNotActed\n            );\n        }, false);\n    };\n\n    const teamMemberCanLevelUp = () => {\n        return team.reduce((previousMemberHasNotLevelledUp, member) => {\n            return member.XP >= 10 || previousMemberHasNotLevelledUp;\n        }, false);\n    };\n\n    const anyTeamMemberHasJustFallen = () => {\n        return team.reduce((previousMemberHasNotFallen, member) => {\n            return (\n                (member.Fallen === false && member.HP <= 0) ||\n                previousMemberHasNotFallen\n            );\n        }, false);\n    };\n\n    const startEpisode = () => {\n        if (!episodeStarted) {\n            log(\"Starting Episode!\");\n            setEpisodeStarted(true);\n        }\n    };\n\n    const endEpisode = () => {\n        if (episodeStarted) {\n            setTeam(\n                team.map(member => {\n                    return { ...member, HasActed: false };\n                })\n            );\n            setEpisodeVillainDefeated(false);\n            setEpisodeVillainActed(false);\n            setNewTeamMemberAdded(false);\n            log(\"Ending Episode!\");\n            setEpisodeStarted(false);\n        }\n    };\n\n    const endGame = () => {\n        log(\"Game Over!\");\n        setEpisodeStarted(false);\n    };\n\n    const addTeamMember = () => {\n        setTeam([...team, { ...generateTeamMember(), HasActed: true }]);\n        setNewTeamMemberAdded(true);\n        log(\"New Team Member!\");\n    };\n\n    const setNewArcVillain = () => {\n        setGameState(() => {\n            return {\n                ...gameState,\n                BossInfo: generateBoss()\n            };\n        });\n        log(\"New Arc Villain!\");\n    };\n\n    const setNewEpisodeVillain = () => {\n        setGameState(() => {\n            return {\n                ...gameState,\n                MonsterInfo: generateMonster()\n            };\n        });\n        log(\"New Episode Villain!\");\n    };\n\n    const defeatEpisodeVillain = () => {\n        setGameState({\n            ...gameState,\n            MonsterInfo: null,\n            BossInfo: {\n                ...gameState.BossInfo\n            },\n            Score: gameState.Score + 100\n        });\n\n        /**\n        setTeam(\n            team.map(member => {\n                return {\n                    ...member,\n                    XP: member.XP + gameState.MonsterInfo.Difficulty\n                };\n            })\n        );\n        */\n        setEpisodeVillainDefeated(true);\n        log(\"Episode Villain Has Been Defeated!\");\n    };\n\n    const defeatTeamMember = index => {\n        setTeam([\n            ...team.slice(0, index),\n            {\n                ...team[index],\n                Fallen: true\n            },\n            ...team.slice(index + 1)\n        ]);\n        log(team[index].Name + \" has fallen!\");\n    };\n\n    const teamMemberAct = index => {\n        setAnimationFlags({\n            teamMemberIndex: index,\n            teamMemberAnimated: true,\n            monsterAnimated: false\n        });\n        if (\n            team[index].Action === \"Fight\" &&\n            team[index].Class === \"Warrior\" &&\n            episodeVillainDefeated === false\n        ) {\n            log(team[index].Name + \" Fights!\");\n            setTeam([\n                ...team.slice(0, index),\n                {\n                    ...team[index],\n                    HP:\n                        team[index].HP -\n                        Math.max(gameState.MonsterInfo.Difficulty - 2, 2),\n                    XP: team[index].XP + gameState.MonsterInfo.Difficulty,\n                    HasActed: true\n                },\n                ...team.slice(index + 1)\n            ]);\n            setGameState({\n                ...gameState,\n                MonsterInfo: {\n                    ...gameState.MonsterInfo,\n                    HP: gameState.MonsterInfo.HP - team[index].Level * 3\n                }\n            });\n        } else if (\n            team[index].Action === \"Fight\" &&\n            team[index].Class === \"Mage\" &&\n            episodeVillainDefeated === false\n        ) {\n            log(team[index].Name + \" Casts a Spell!\");\n            setTeam([\n                ...team.slice(0, index),\n                {\n                    ...team[index],\n                    HP:\n                        team[index].HP -\n                        Math.max(gameState.MonsterInfo.Difficulty, 2),\n                    MP: team[index].MP - 1,\n                    XP: team[index].XP + gameState.MonsterInfo.Difficulty,\n                    HasActed: true\n                },\n                ...team.slice(index + 1)\n            ]);\n            setGameState({\n                ...gameState,\n                MonsterInfo: {\n                    ...gameState.MonsterInfo,\n                    HP: gameState.MonsterInfo.HP - team[index].Level * 5\n                }\n            });\n        } else if (team[index].Action === \"Rest\" || episodeVillainDefeated) {\n            log(team[index].Name + \" Rests!\");\n            setTeam([\n                ...team.slice(0, index),\n                {\n                    ...team[index],\n                    HP: Math.min(team[index].HP + 3, team[index].MaxHP),\n                    MP: Math.min(team[index].MP + 2, team[index].MaxMP),\n                    HasActed: true\n                },\n                ...team.slice(index + 1)\n            ]);\n            setGameState({\n                ...gameState\n            });\n        } else if (team[index].Action === \"Train\") {\n            log(team[index].Name + \" Trains!\");\n            setTeam([\n                ...team.slice(0, index),\n                {\n                    ...team[index],\n                    MP: team[index].MP - 1,\n                    XP: team[index].XP + 5,\n                    HasActed: true\n                },\n                ...team.slice(index + 1)\n            ]);\n            setGameState({\n                ...gameState\n            });\n        }\n    };\n\n    const teamMemberLevelUp = index => {\n        setAnimationFlags({\n            teamMemberIndex: index,\n            teamMemberAnimated: true,\n            monsterAnimated: false\n        });\n        if (team[index].XP >= 10) {\n            setTeam([\n                ...team.slice(0, index),\n                {\n                    ...team[index],\n                    XP: team[index].XP - 10,\n                    Level: team[index].Level + 1\n                },\n                ...team.slice(index + 1)\n            ]);\n        }\n        log(team[index].Name + \" Levels Up!\");\n    };\n\n    const setTeamMemberAction = (action, index) => {\n        setTeam([\n            ...team.slice(0, index),\n            {\n                ...team[index],\n                Action: action\n            },\n            ...team.slice(index + 1)\n        ]);\n    };\n\n    if (gameIsOver()) {\n        return (\n            <div>\n                <div className=\"section\">\n                    <div className=\"content container\">\n                        <div className=\"columns\">\n                            <div className=\"column\">\n                                <div className=\"title\">\n                                    Idle Senshi - ダラダラ戦士\n                                </div>\n                                <div className=\"subtitle\">\n                                    Score: {gameState.Score}\n                                </div>\n                            </div>\n\n                            <div className=\"column has-text-centered is-4\">\n                                <div\n                                    className=\"button is-large is-fullwidth is-primary\"\n                                    onClick={startEpisode}\n                                    disabled={episodeStarted || gameIsOver()}\n                                >\n                                    Play\n                                </div>\n                            </div>\n                        </div>\n                        <hr />\n                        <div className=\"columns\">\n                            <div className=\"column is-two-fifths\">\n                                <BossCard info={gameState.BossInfo}></BossCard>\n                            </div>\n                            <div className=\"column\">\n                                <MonsterCard\n                                    info={gameState.MonsterInfo}\n                                    animated={animationFlags.monsterAnimated}\n                                ></MonsterCard>\n                            </div>\n                        </div>\n                        <hr />\n                        <div className=\"columns\">\n                            <div className=\"column has-text-centered\">\n                                <div className=\"title\">Game Over</div>\n                            </div>\n                        </div>\n                        <div className=\"columns\">\n                            <div className=\"column is-4\"></div>\n                            <div className=\"column has-text-centered is-4\">\n                                <div\n                                    className=\"button is-large is-fullwidth is-primary\"\n                                    onClick={restart}\n                                >\n                                    Play Again?\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"columns\">\n                            <div className=\"column has-text-centered\">\n                                <p>Made with ❤ by Max Lipkin</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    return (\n        <div>\n            <div className=\"section\">\n                <div className=\"content container\">\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <div className=\"title\">\n                                Idle Senshi - ダラダラ戦士\n                            </div>\n                            <div className=\"subtitle\">\n                                Score: {gameState.Score}\n                            </div>\n                        </div>\n\n                        <div className=\"column has-text-centered is-4\">\n                            <div\n                                className=\"button is-large is-fullwidth is-primary\"\n                                onClick={startEpisode}\n                                disabled={episodeStarted || gameIsOver()}\n                            >\n                                Play\n                            </div>\n                        </div>\n                    </div>\n                    <hr />\n                    <div className=\"columns\">\n                        <div className=\"column is-two-fifths\">\n                            <BossCard info={gameState.BossInfo}></BossCard>\n                        </div>\n                        <div className=\"column\">\n                            <MonsterCard\n                                info={gameState.MonsterInfo}\n                                animated={animationFlags.monsterAnimated}\n                            ></MonsterCard>\n                        </div>\n                    </div>\n                    <hr />\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <div className=\"columns\">\n                                <div className=\"column is-4\">\n                                    <TeamMemberCard\n                                        info={team.length > 0 ? team[0] : null}\n                                        index={0}\n                                        setTeamMemberAction={\n                                            setTeamMemberAction\n                                        }\n                                        active={!episodeStarted}\n                                        animated={\n                                            animationFlags.teamMemberAnimated &&\n                                            animationFlags.teamMemberIndex === 0\n                                        }\n                                    />\n                                </div>\n                                <div className=\"column is-4\">\n                                    <TeamMemberCard\n                                        info={team.length > 1 ? team[1] : null}\n                                        index={1}\n                                        setTeamMemberAction={\n                                            setTeamMemberAction\n                                        }\n                                        active={!episodeStarted}\n                                        animated={\n                                            animationFlags.teamMemberAnimated &&\n                                            animationFlags.teamMemberIndex === 1\n                                        }\n                                    />\n                                </div>\n                                <div className=\"column is-4\">\n                                    <TeamMemberCard\n                                        info={team.length > 2 ? team[2] : null}\n                                        index={2}\n                                        setTeamMemberAction={\n                                            setTeamMemberAction\n                                        }\n                                        active={!episodeStarted}\n                                        animated={\n                                            animationFlags.teamMemberAnimated &&\n                                            animationFlags.teamMemberIndex === 2\n                                        }\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-2\"></div>\n                                <div className=\"column is-4\">\n                                    <TeamMemberCard\n                                        info={team.length > 3 ? team[3] : null}\n                                        index={3}\n                                        setTeamMemberAction={\n                                            setTeamMemberAction\n                                        }\n                                        active={!episodeStarted}\n                                        animated={\n                                            animationFlags.teamMemberAnimated &&\n                                            animationFlags.teamMemberIndex === 3\n                                        }\n                                    />\n                                </div>\n                                <div className=\"column is-4\">\n                                    <TeamMemberCard\n                                        info={team.length > 4 ? team[4] : null}\n                                        index={4}\n                                        setTeamMemberAction={\n                                            setTeamMemberAction\n                                        }\n                                        active={!episodeStarted}\n                                        animated={\n                                            animationFlags.teamMemberAnimated &&\n                                            animationFlags.teamMemberIndex === 4\n                                        }\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"column is-4\">\n                            <GameLogCard messages={logMessages}></GameLogCard>\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column has-text-centered\">\n                            <p>Made with ❤ by Max Lipkin</p>\n                            <a\n                                href=\"https://ko-fi.com/maxlipkin\"\n                                target=\"_blank\"\n                            >\n                                <img\n                                    src=\"https://az743702.vo.msecnd.net/cdn/kofi2.png?v=2\"\n                                    alt=\"Buy Me a Coffee at ko-fi.com\"\n                                    style={{ height: 32 }}\n                                />\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}